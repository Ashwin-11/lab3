using System;
using System.Collections.Generic;
namespace Lab3Q1
{
    public class WordCountTester
    {
        static void unusedMain()
        {
          try {


                //=================================================
                // Implement your tests here. Check all the edge case scenarios.
                // Create a large list which iterates over WCTester
                //=================================================

                /*----------------------------------------------1 Word---------------------------------------------------------*/
                string line = "Ashwin";
                int startIdx = 0;
                int expectedResults = 1;
                WCTester(line, startIdx, expectedResults);

                line = "Ashwin ";
                startIdx = 0;
                expectedResults = 1;
                WCTester(line, startIdx, expectedResults);

                line = " Ashwin";
                startIdx = 0;
                expectedResults = 1;
                WCTester(line, startIdx, expectedResults);

                line = " Ashwin ";
                startIdx = 0;
                expectedResults = 1;
                WCTester(line, startIdx, expectedResults);

                line = "Ashwin";
                startIdx = 3;
                expectedResults = 1;
                WCTester(line, startIdx, expectedResults);

                /*----------------------------------------------2 Words---------------------------------------------------------*/
                line = "Ash win";
                startIdx = 0;
                expectedResults = 2;
                WCTester(line, startIdx, expectedResults);

                line = "Ash win ";
                startIdx = 0;
                expectedResults = 2;
                WCTester(line, startIdx, expectedResults);

                line = " Ash win";
                startIdx = 0;
                expectedResults = 2;
                WCTester(line, startIdx, expectedResults);

                line = " Ash win ";
                startIdx = 0;
                expectedResults = 2;
                WCTester(line, startIdx, expectedResults);

                line = "Ash win";
                startIdx = 2;
                expectedResults = 2;
                WCTester(line, startIdx, expectedResults);

                line = "Ash win";
                startIdx = 3;
                expectedResults = 1;
                WCTester(line, startIdx, expectedResults);

                /*----------------------------------------------3 Words---------------------------------------------------------*/
                line = "I am Ashwin";
                startIdx = 0;
                expectedResults = 3;
                WCTester(line, startIdx, expectedResults);

                line = "I am Ashwin ";
                startIdx = 0;
                expectedResults = 3;
                WCTester(line, startIdx, expectedResults);

                line = " I am Ashwin";
                startIdx = 0;
                expectedResults = 3;
                WCTester(line, startIdx, expectedResults);

                line = " I am Ashwin ";
                startIdx = 0;
                expectedResults = 3;
                WCTester(line, startIdx, expectedResults);

                line = "I am Ashwin";
                startIdx = 2;
                expectedResults = 2;
                WCTester(line, startIdx, expectedResults);

                line = "I am Ashwin";
                startIdx = 4;
                expectedResults = 1;
                WCTester(line, startIdx, expectedResults);

                line = "I am Ashwin";
                startIdx = 7;
                expectedResults = 1;
                WCTester(line, startIdx, expectedResults);

                line = "I a m A s hw i n";
                startIdx = 4;
                expectedResults = 6;
                WCTester(line, startIdx, expectedResults);

            } catch(UnitTestException e) {
              Console.WriteLine(e);
            }

        }


        /**
         * Tests word_count for the given line and starting index
         * @param line line in which to search for words
         * @param start_idx starting index in line to search for words
         * @param expected expected answer
         * @throws UnitTestException if the test fails
         */
          static void WCTester(string line, int start_idx, int expected) {

            //=================================================
            // Implement: comparison between the expected and
            // the actual word counter results
            //=================================================
            int result = HelperFunctions.WordCount(ref line, start_idx);
            

            if (result != expected) {
              throw new Lab3Q1.UnitTestException(ref line, start_idx, result, expected, String.Format("UnitTestFailed: result:{0} expected:{1}, line: {2} ,starting from index {3}", result, expected, line, start_idx));
            }

           }
    }
}
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Threading;
using System.Linq;


namespace Lab3Q1
{
    public class HelperFunctions
    {
        /**
         * Counts number of words, separated by spaces, in a line.
         * @param line string in which to count words
         * @param start_idx starting index to search for words
         * @return number of words in the line
         */
        public static int WordCount(ref string line, int start_idx)
        {
            // YOUR IMPLEMENTATION HERE
            int isSpace = 0; //out
            int isChar = 1;
            int state= isSpace;
            int count = 0;

            if (line[start_idx]==' ')
                state = isSpace;
            else
            {
                state = isChar;
                count = 1;
            }

            int i = start_idx;

            while (i < line.Length)
            {
                // Scan all characters one by one, if character is a separator, set the state as isSpace
                if (line[i] == ' ')
                    state = isSpace;
                // If next character is not a space and the state is isSpace(prev char was a space) , then set the state as isChar and increment word count
                else if (state == isSpace)
                {
                    state = isChar;
                    ++count;
                }
                ++i;
                }
            return count;
        }


        /**
        * Reads a file to count the number of words each actor speaks.
        *
        * @param filename file to open
        * @param mutex mutex for protected access to the shared wcounts map
        * @param wcounts a shared map from character -> word count
        */
        public static void CountCharacterWords(string filename, Mutex mutex, Dictionary<string, int> wcounts)
        {

            //===============================================
            //  IMPLEMENT THIS METHOD INCLUDING THREAD SAFETY
            //===============================================

             string line;  // for storing each line read from the file
             string character = "";  // empty character to start
             System.IO.StreamReader file = new System.IO.StreamReader(filename);

             while ((line = file.ReadLine()) != null)
             {
                //=================================================
                // YOUR JOB TO ADD WORD COUNT INFORMATION TO MAP
                //=================================================
                
                // Is the line a dialogueLine?
                if (IsDialogueLine(line,ref character) != -1)
                {
                    
                    int index = IsDialogueLine(line, ref character);  //If yes, get the index and the character name.

                    if (index > 0 && character != null) //if index > 0 and character not empty
                    {
                        
                        int wc=WordCount(ref line, index); //get the word counts
                        mutex.WaitOne(); //modifying dictionary should be done by one thread at a time
                        if (wcounts.ContainsKey(character)) //if the key exists, update the word counts
                        { 
                                wcounts[character] += wc;
                        }
                        else    //else add a new key-value to the dictionary
                        {
                            wcounts.Add(character, wc);
                        }
                        mutex.ReleaseMutex();

                        //    reset the character
                    }
                }
                
            }
            // Close the file
            file.Close();
        }



        /**
         * Checks if the line specifies a character's dialogue, returning
         * the index of the start of the dialogue.  If the
         * line specifies a new character is speaking, then extracts the
         * character's name.
         *
         * Assumptions: (doesn't have to be perfect)
         *     Line that starts with exactly two spaces has
         *       CHARACTER. <dialogue>
         *     Line that starts with exactly four spaces
         *       continues the dialogue of previous character
         *
         * @param line line to check
         * @param character extracted character name if new character,
         *        otherwise leaves character unmodified
         * @return index of start of dialogue if a dialogue line,
         *      -1 if not a dialogue line
         */
        static int IsDialogueLine(string line, ref string character)
        {

            // new character
            if (line.Length >= 3 && line[0] == ' '
                && line[1] == ' ' && line[2] != ' ')
            {
                // extract character name

                int start_idx = 2;
                int end_idx = 3;
                while (end_idx <= line.Length && line[end_idx - 1] != '.')
                {
                    ++end_idx;
                }

                // no name found
                if (end_idx >= line.Length)
                {
                    return 0;
                }

                // extract character's name
                character = line.Substring(start_idx, end_idx - start_idx - 1);
                return end_idx;
            }

            // previous character
            if (line.Length >= 5 && line[0] == ' '
                && line[1] == ' ' && line[2] == ' '
                && line[3] == ' ' && line[4] != ' ')
            {
                // continuation
                return 4;
            }

            return 0;
        }

        /**
         * Sorts characters in descending order by word count
         *
         * @param wcounts a map of character -> word count
         * @return sorted vector of {character, word count} pairs
         */
        public static List<Tuple<int, string>> SortCharactersByWordcount(Dictionary<string, int> wordcount)
        {
            // Implement sorting by word count here
            List<Tuple<int, string>> sortedByValueList= new List<Tuple<int, string>>();
            Tuple<int, string> temp;

            foreach (KeyValuePair<string,int> pairItem in wordcount)
            {
                temp = new Tuple<int, string>(pairItem.Value,pairItem.Key);
                sortedByValueList.Add(temp);
            }

            sortedByValueList.Sort((s1, s2) => s2.Item1.CompareTo(s1.Item1));

       //     PrintListofTuples(sortedByValueList);

            return sortedByValueList;
        }

        /**
         * Prints the List of Tuple<int, string>
         *
         * @param sortedList
         * @return Nothing
         */
        public static void PrintListofTuples(List<Tuple<int, string>> sortedList)
        {
            // Implement printing here
            foreach (Tuple<int, string> tuple in sortedList)
            {
                Console.WriteLine("Word Count:"+tuple.Item1 + ", Character:" + tuple.Item2);
            }
        }
    }
}
------------------------------------------------------------------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Threading;
using System.Diagnostics;

namespace Lab3Q1
{
    class Program
    {
        static void Main(string[] args)
        {
          // map and mutex for thread safety
          Mutex mutex = new Mutex();
          Dictionary<string, int> wcountsSingleThread = new Dictionary<string, int>();
          Dictionary<string, int> wcountsMultiThread = new Dictionary<string, int>();
          Stopwatch SingleThreadTime = new Stopwatch();
          Stopwatch MultiThreadTime = new Stopwatch();

            // Dictionary<string, int> wcountsSingleThread = new Dictionary<string, int> { { "d", 1}, { "b", 55 }, { "a", 6 }, { "e", 33 } };
            // data\shakespeare_antony_cleopatra.txt

            var filenames = new List<string> {
                "C:/Users/ashwi/Documents/GitHub/lab3/data/shakespeare_antony_cleopatra.txt",
                "C:/Users/ashwi/Documents/GitHub/lab3/data/shakespeare_alls_well.txt",
                "C:/Users/ashwi/Documents/GitHub/lab3/data/shakespeare_hamlet.txt",
                "C:/Users/ashwi/Documents/GitHub/lab3/data/shakespeare_julius_caesar.txt",
                "C:/Users/ashwi/Documents/GitHub/lab3/data/shakespeare_king_lear.txt",
                "C:/Users/ashwi/Documents/GitHub/lab3/data/shakespeare_macbeth.txt",
                "C:/Users/ashwi/Documents/GitHub/lab3/data/shakespeare_merchant_of_venice.txt",
                "C:/Users/ashwi/Documents/GitHub/lab3/data/shakespeare_midsummer_nights_dream.txt",
                "C:/Users/ashwi/Documents/GitHub/lab3/data/shakespeare_much_ado.txt",
                "C:/Users/ashwi/Documents/GitHub/lab3/data/shakespeare_othello.txt",
                "C:/Users/ashwi/Documents/GitHub/lab3/data/shakespeare_romeo_and_juliet.txt",
                "C:/Users/ashwi/Documents/GitHub/lab3/data/shakespeare_as_you_like_it.txt",
                "C:/Users/ashwi/Documents/GitHub/lab3/data/shakespeare_comedy_of_errors.txt",
                "C:/Users/ashwi/Documents/GitHub/lab3/data/shakespeare_coriolanus.txt",
                "C:/Users/ashwi/Documents/GitHub/lab3/data/shakespeare_cymbeline.txt",
                "C:/Users/ashwi/Documents/GitHub/lab3/data/shakespeare_gentlemen_of_verona.txt",
                "C:/Users/ashwi/Documents/GitHub/lab3/data/shakespeare_king_henry_IV_first.txt",
                "C:/Users/ashwi/Documents/GitHub/lab3/data/shakespeare_king_henry_IV_second.txt",
                "C:/Users/ashwi/Documents/GitHub/lab3/data/shakespeare_king_henry_V.txt",
                "C:/Users/ashwi/Documents/GitHub/lab3/data/shakespeare_king_henry_VI_first.txt",
                "C:/Users/ashwi/Documents/GitHub/lab3/data/shakespeare_king_henry_VI_second.txt",
                "C:/Users/ashwi/Documents/GitHub/lab3/data/shakespeare_king_henry_VI_third.txt",
                "C:/Users/ashwi/Documents/GitHub/lab3/data/shakespeare_king_henry_VIII.txt",
                "C:/Users/ashwi/Documents/GitHub/lab3/data/shakespeare_king_john.txt",
                "C:/Users/ashwi/Documents/GitHub/lab3/data/shakespeare_king_lear.txt",
                "C:/Users/ashwi/Documents/GitHub/lab3/data/shakespeare_king_richard_II.txt",
                "C:/Users/ashwi/Documents/GitHub/lab3/data/shakespeare_king_richard_III.txt",
                "C:/Users/ashwi/Documents/GitHub/lab3/data/shakespeare_lovers_complaint.txt",
                "C:/Users/ashwi/Documents/GitHub/lab3/data/shakespeare_loves_labours_lost.txt",
                "C:/Users/ashwi/Documents/GitHub/lab3/data/shakespeare_sonnets.txt",
                "C:/Users/ashwi/Documents/GitHub/lab3/data/shakespeare_taming_of_the_shrew.txt",

           };

            //=============================================================
            // YOUR IMPLEMENTATION HERE TO COUNT WORDS IN SINGLE THREAD
            //=============================================================
            Console.WriteLine("----------------------------------SingleThread Starts!--------------------------------------");
            SingleThreadTime.Start();
            foreach (string filename in filenames)
            {
                HelperFunctions.CountCharacterWords(filename, mutex, wcountsSingleThread);
            }

            List<Tuple<int, string>> SingleThreadAnswer = new List<Tuple<int, string>>();
            SingleThreadAnswer=HelperFunctions.SortCharactersByWordcount(wcountsSingleThread);
            HelperFunctions.PrintListofTuples(SingleThreadAnswer);
            SingleThreadTime.Stop();

            Console.WriteLine("SingleThread RunTime: {0:00} min {1:00} sec {2:00} milisecond", SingleThreadTime.Elapsed.Minutes, SingleThreadTime.Elapsed.Seconds, SingleThreadTime.Elapsed.Milliseconds);
            Console.WriteLine("----------------------------------SingleThread is Done!--------------------------------------");
            Console.WriteLine("");
            //=============================================================
            // YOUR IMPLEMENTATION HERE TO COUNT WORDS IN MULTIPLE THREADS
            //=============================================================
            Console.WriteLine("----------------------------------MultiThread Starts!--------------------------------------");
            MultiThreadTime.Start();
            Thread[] threads_per_file = new Thread[filenames.Count]; //no of threads=no of data files
            int i = 0;
            foreach (string filename in filenames)
            {
                threads_per_file[i]= new Thread(() => HelperFunctions.CountCharacterWords(filename, mutex, wcountsMultiThread));   
                threads_per_file[i].Start();
                ++i;
            }

            for (int x = 0; x < filenames.Count; x++)
            {
                threads_per_file[x].Join();
            }

            List<Tuple<int, string>> MultiThreadAnswer = new List<Tuple<int, string>>();
            MultiThreadAnswer = HelperFunctions.SortCharactersByWordcount(wcountsMultiThread);
            HelperFunctions.PrintListofTuples(MultiThreadAnswer);
            MultiThreadTime.Stop();

            Console.WriteLine("Multithread RunTime: {0:00} min {1:00} sec {2:00} milisecond", MultiThreadTime.Elapsed.Minutes, MultiThreadTime.Elapsed.Seconds, MultiThreadTime.Elapsed.Milliseconds);
            Console.WriteLine( "----------------------------------MultiThread is Done!--------------------------------------");
           //return 0;
        }
    }
}
